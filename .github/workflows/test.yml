# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Run hstreamdb operator test case

concurrency:
  group: test-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    ## For update codecov.io
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  UnitTest:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        use-existing-cluster:
          - true
          - false

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19.3

    - name: Go Build Cache
      uses: actions/cache@v3
      with:
        path: |
            ~/.cache/go-build
            ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install kubebuilder
      run: |
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m | sed 's/x86_64/amd64/')
        curl -fsL "https://storage.googleapis.com/kubebuilder-tools/kubebuilder-tools-1.16.4-${OS}-${ARCH}.tar.gz" -o kubebuilder-tools
        tar -zxvf kubebuilder-tools
        sudo mv kubebuilder/ /usr/local/kubebuilder

    - name: Mod tidy and install ginkgo
      run: |
        go mod tidy
        go get github.com/onsi/ginkgo/v2/ginkgo/generators@v2.5.0
        go get github.com/onsi/ginkgo/v2/ginkgo/internal@v2.5.0
        go get github.com/onsi/ginkgo/v2/ginkgo/labels@v2.5.0
        go install github.com/onsi/ginkgo/v2/ginkgo

    - name: Run unit tests that don't depend on really k8s cluster
      if: matrix.use-existing-cluster == false
      run: ginkgo run --cover --coverprofile ./cover.out ./...

    - name: Setup minikube
      if: matrix.use-existing-cluster
      uses: medyagh/setup-minikube@latest

    - name: Install rqlite cluster
      if: matrix.use-existing-cluster
      uses: ./.github/actions/deploy-rqlite

    - name: Run unit tests that depend on existing k8s cluster
      if: matrix.use-existing-cluster
      env:
        USE_EXISTING_CLUSTER: ${{ matrix.use-existing-cluster }}
      # set label filter 'k8s' to ignore the test cases that don't deponed on really k8s cluster
      run: ginkgo run --cover --coverprofile ./cover.out  --label-filter 'k8s' controllers/

    - name: Report code coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./cover.out # optional
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)

    - if: failure()
      run: kubectl get pods -A

    - if: failure()
      run: kubectl get event -n kube-system

    - if: failure()
      run: kubectl get event
  deployment:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        install:
          - yaml
          - helm
    steps:
      - run: minikube start

      - uses: actions/checkout@v3

      - uses: ./.github/actions/deploy-rqlite

      - name: Build image
        env:
          IMG: "hstream/hstream-operator-controller:latest"
        run: eval $(minikube docker-env) && docker build -t $IMG .

      - name: Deploy controller by yaml
        if: matrix.install == 'yaml'
        env:
          IMG: "hstream/hstream-operator-controller:latest"
        run: make deploy
      - name: Deploy controller by helm
        if: matrix.install == 'helm'
        run: |
          helm install hstream-operator deploy/charts/hstream-operator \
            --set image.tag=latest \
            --namespace hstream-operator-system \
            --create-namespace

      - name: Check operator
        timeout-minutes: 5
        run: |
          set -euo pipefail
          while [ "$(kubectl get pods -l "control-plane=hstream-operator-manager" -n hstream-operator-system -o json | jq '.items[0].status.containerStatuses[] | select(.ready==true) | .containerID')" = "" ]; do
            echo "waiting operator controller pod running"
            sleep 1
          done

      - name: Deploy hstreamdb
        run: |
          kubectl apply -f config/samples/apps_v1alpha1_hstreamdb.yaml
      - name: Check hstream custom resource status
        timeout-minutes: 5
        shell: bash
        run: |
          while
            kubectl get hstreamdb hstreamdb-sample -o json
            kubectl get pod
            kubectl logs -l "control-plane=hstream-operator-manager" -n hstream-operator-system --tail=1000
            status=`kubectl get hstreamdb hstreamdb-sample -o json | jq '.status'`;
            echo "hserverConfigured=$(echo $status | jq --raw-output '.hserverConfigured')"
            echo "hstoreConfigured=$(echo $status | jq --raw-output '.hstoreConfigured')"
            [[ "$status" == "null" ]] \
            || [[ "$(echo $status | jq --raw-output '.hserverConfigured')" != "true" ]] \
            || [[ "$(echo $status | jq --raw-output '.hstoreConfigured')" != "true" ]]
          do
            echo "waiting for bootstrapping"
            sleep 5
          done
      - if: failure()
        run: kubectl logs -l "control-plane=hstream-operator-manager" -n hstream-operator-system --tail=1000
      - if: failure()
        run: kubectl describe hstreamdb hstreamdb-sample
      - if: failure()
        run: kubectl get hstreamdb hstreamdb-sample -o json
      - if: failure()
        run: kubectl get pods -A